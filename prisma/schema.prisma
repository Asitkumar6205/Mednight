generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
<<<<<<< HEAD
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
=======
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

>>>>>>> c3f08b9 (Study CRUD Added)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
<<<<<<< HEAD
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  username    String?  @unique 
  password   String?  
  createdAt DateTime @default(now()) @db.Timestamp(6) 
  updatedAt DateTime @updatedAt
=======

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
>>>>>>> c3f08b9 (Study CRUD Added)
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
<<<<<<< HEAD
 
  @@map("users")
}
 
=======

  @@map("users")
}

>>>>>>> c3f08b9 (Study CRUD Added)
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
<<<<<<< HEAD
 
=======

>>>>>>> c3f08b9 (Study CRUD Added)
  @@unique([identifier, token])
  @@map("verification_tokens")
}

<<<<<<< HEAD
model PatientReport {
  id                 String   @id @default(cuid())
  fullName           String
  age               String   // Keeping as String since your schema defines it that way
  gender            Gender
  phone             String?  // Optional
  physician         String
  modality          Modality
  bodyPart         String
  urgency          Urgency
  reportType       ReportType
  specialInstructions String?
  createdAt DateTime @default(now()) // Auto timestamp for record creation
  updatedAt DateTime @updatedAt      // Auto-updated timestamp
}

// Enums based on formSchema
=======
model Order {
  id                  String     @id @default(cuid())
  fullName            String
  age                 String
  gender              Gender
  phone               String?
  physician           String
  modality            Modality
  history             String?
  bodyPart            String
  urgency             Urgency
  reportType          ReportType
  specialInstructions String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

>>>>>>> c3f08b9 (Study CRUD Added)
enum Gender {
  Male
  Female
  Other
}

enum Modality {
  X_Ray
  CT
  MRI
  Ultrasound
  PET_CT
}

enum Urgency {
  Routine
  Urgent
  Stat
}

enum ReportType {
  Preliminary
  Final
}
